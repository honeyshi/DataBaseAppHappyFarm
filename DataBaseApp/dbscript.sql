CREATE OR REPLACE PROCEDURE create_animal() 
LANGUAGE SQL
AS $$
	CREATE TABLE IF NOT EXISTS animal
	(animalId SERIAL NOT NULL UNIQUE PRIMARY KEY,
	type VARCHAR(255) NOT NULL,
	corralId INTEGER NOT NULL,
	FOREIGN KEY (corralId) REFERENCES corral(corralId))
$$;

CREATE OR REPLACE PROCEDURE create_corral() 
LANGUAGE SQL
AS $$
	CREATE TABLE IF NOT EXISTS corral
	(corralId SERIAL NOT NULL UNIQUE PRIMARY KEY,
	 capacity INTEGER NOT NULL,
	 currentAnimals INTEGER NOT NULL,
	 barnId INTEGER NOT NULL,
	 FOREIGN KEY (barnId) REFERENCES barn(barnId))
$$;

CREATE OR REPLACE PROCEDURE create_barn() 
LANGUAGE SQL
AS $$
	CREATE TABLE IF NOT EXISTS barn
	(barnId SERIAL NOT NULL UNIQUE PRIMARY KEY,
location VARCHAR(255) NOT NULL)
$$;

CREATE OR REPLACE PROCEDURE create_food() 
LANGUAGE SQL
AS $$
	CREATE TABLE IF NOT EXISTS food
	(foodId SERIAL NOT NULL UNIQUE PRIMARY KEY,
	type VARCHAR(255) NOT NULL,
	barnId INTEGER NOT NULL,
	FOREIGN KEY (barnId) REFERENCES barn(barnId))
$$;

CREATE OR REPLACE PROCEDURE create_sick_animals() 
LANGUAGE SQL
AS $$
	CREATE TABLE IF NOT EXISTS sick_animals
	(illnessId SERIAL NOT NULL UNIQUE PRIMARY KEY,
	 animalId INTEGER NOT NULL,
	 illType VARCHAR(255) NOT NULL,
	 gettingTreatment BOOL NOT NULL,
	 isHealthy BOOL NOT NULL,
	 FOREIGN KEY (animalId) REFERENCES animal(animalId))
$$;


CREATE OR REPLACE PROCEDURE create_feeding() 
LANGUAGE SQL
AS $$
	CREATE TABLE IF NOT EXISTS feeding
	(feedingId SERIAL NOT NULL UNIQUE PRIMARY KEY,
foodId INTEGER NOT NULL,
	 animalId INTEGER NOT NULL,
	 amount INTEGER NOT NULL,
	 periodicity INTEGER NOT NULL,
	 FOREIGN KEY (animalId) REFERENCES animal(animalId),
	 FOREIGN KEY (foodId) REFERENCES food(foodId))
$$;




